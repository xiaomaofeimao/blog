(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{261:function(e,o,r){"use strict";r.r(o);var n=r(28),a=Object(n.a)({},(function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"路由配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路由配置"}},[e._v("#")]),e._v(" 路由配置")]),e._v(" "),r("p",[e._v('<div data-lake-element="root" class="lake-engine lake-typography-traditional" data-parser-by="lake2html">')]),e._v(" "),r("h2",{attrs:{id:"什么是路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是路由"}},[e._v("#")]),e._v(" 什么是路由")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">在点击导航选项的时候，让对应内容填充的到页面，实现这种效果的方式就是路由。简单来说，路由就是用来跟后端服务器进行交互的一种方式，通过不同的路径来请求不同的资源。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">在 umi 中，应用都是<a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank" rel="noopener noreferrer">单页应用</a>，页面地址的跳转都是在浏览器端实现的，不会去重新请求服务端获取 html。html 只是在应用初始化的时候加载一次。所有的页面都是由不同的组件构成，页面的切换其实就是不同组件的切换，你只需要在配置中把不同的路由路径和对应的组件关联上即可。单页应用的功能示意图如下:</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><span data-card-type="inline" data-lake-card="image" data-card-value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Flark%2F0%2F2018%2Fpng%2F5482%2F1525691154758-08922bea-f29c-4d34-bade-e47fc0cce089.png%22%2C%22alt%22%3A%22image%22%2C%22align%22%3A%22left%22%7D"><img data-role="image" src="https://cdn.yuque.com/lark/0/2018/png/5482/1525691154758-08922bea-f29c-4d34-bade-e47fc0cce089.png" data-raw-src="https://cdn.yuque.com/lark/0/2018/png/5482/1525691154758-08922bea-f29c-4d34-bade-e47fc0cce089.png" class="image lake-drag-image" style="border: none; box-shadow: none; visibility: visible;"></span></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h2",{attrs:{id:"路由配置方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路由配置方法"}},[e._v("#")]),e._v(" 路由配置方法")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">在 umi 应用中，路由的配置是在<code>/config/config.js</code>中 <code>exports.routes</code> 中配置。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h3",{attrs:{id:"基本"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本"}},[e._v("#")]),e._v(" 基本")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><code>exports.routes</code> 需要是一个数组，数组中的每一个对象是一个路由信息，比如：</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22exports.routes%20%3D%20%5B%5Cn%20%20%7B%5Cn%20%20%20%20path%3A%20\'%2F\'%2C%5Cn%20%20%20%20component%3A%20\'App\'%2C%5Cn%20%20%7D%2C%20%5Cn%20%20%7B%5Cn%20%20%20%20path%3A%20\'%2Fuser\'%2C%5Cn%20%20%20%20component%3A%20\'User\'%2C%5Cn%20%20%7D%5Cn%5D%3B%22%2C%22id%22%3A%22nxUDy%22%7D" id="nxUDy"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("exports.routes = [\n {\n   path: '/',\n   component: 'App',\n }, \n {\n   path: '/user',\n   component: 'User',\n }\n]; \n")])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">其中，path 表示页面访问路径，component 表示 page 下的文件名，比如 <code>App</code>, <code>User</code> 分别表示 <code>page/App</code>，<code>page/User</code>。这样，访问 <a href="http://localhost:7001/" target="_blank" rel="noopener noreferrer">http://localhost:7001/</a> 和 <a href="http://localhost:7001/user" target="_blank" rel="noopener noreferrer">http://localhost:7001/user</a> 则会有展示 <code>App</code>, <code>User</code> 中的内容。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h3",{attrs:{id:"routes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#routes"}},[e._v("#")]),e._v(" routes")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">当需要有一个 <code>layout</code> 作为展示，可以设置 <code>routes</code>：</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22exports.routes%20%3D%20%5B%5Cn%20%20%7B%5Cn%20%20%20%20path%3A%20\'%2F\'%2C%5Cn%20%20%20%20component%3A%20\'App\'%2C%5Cn%20%20%20%20routes%3A%20%5B%7B%5Cn%20%20%20%20%20%20path%3A%20\'list\'%5Cn%20%20%20%20%20%20component%3A%20\'List\'%2C%5Cn%20%20%20%20%7D%2C%20%7B%5Cn%20%20%20%20%20%20path%3A%20\'admin\'%5Cn%20%20%20%20%20%20component%3A%20\'Admin\'%2C%5Cn%20%20%20%20%7D%5D%5Cn%20%20%7D%2C%20%5Cn%20%20%7B%5Cn%20%20%20%20path%3A%20\'%2Fuser\'%2C%5Cn%20%20%20%20component%3A%20\'User\'%2C%5Cn%20%20%7D%5Cn%5D%3B%22%2C%22id%22%3A%22ttsaV%22%7D" id="ttsaV"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("exports.routes = [\n {\n   path: '/',\n   component: 'App',\n   routes: [{\n     path: 'list'\n     component: 'List',\n   }, {\n     path: 'admin'\n     component: 'Admin',\n   }]\n }, \n {\n   path: '/user',\n   component: 'User',\n }\n]; \n")])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">在 <code>page/App</code>  中：</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22export%20default%20(props)%20%3D%3E%20%3Cdiv%20style%3D%7B%7Bpadding%3A%2020%7D%7D%3E%5Cn%20%20%20%20%7Bthis.props.children%7D%5Cn%3C%2Fdiv%3E%22%2C%22id%22%3A%22Ub9YF%22%7D" id="Ub9YF"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('export default (props) => <div style="{{padding:" 20}}>\n   {this.props.children}\n</div> \n')])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">这样访问 <code>/list</code> 跟 <code>/admin</code> 将会都有这个 <code>layout</code>。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">更多配置信息和路由使用方式请参考 umi 官方文档。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h2",{attrs:{id:"实战配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实战配置"}},[e._v("#")]),e._v(" 实战配置")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">我们已经知道了如何在 umi 中配置路由了，那么下面就来实操一把。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h3",{attrs:{id:"第一步：创建页面组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一步：创建页面组件"}},[e._v("#")]),e._v(" 第一步：创建页面组件")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">根据侧边导航样式，我们在 <code>Dashboard</code> 这个目录层级下有三个页面组件需要创建。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">在 <code>src/page</code> 文件夹下创建 <code>Dashboard</code> 文件夹，同时在该文件夹中新建 <code>Analysis.js</code>,  <code>Monitor.js</code>,  <code>Workplace.js</code> 三个文件，目录结构如下:</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22.%5Cn%E2%94%9C%E2%94%80%E2%94%80%20Dashboard%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20Analysis.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20Monitor.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20Workplace.js%5Cn...%2F%2F%20%E7%9C%81%E7%95%A5%E5%85%B6%E4%BB%96%E7%AB%A0%E8%8A%82%E4%B8%AD%E7%9A%84%E7%9B%AE%E5%BD%95%22%2C%22id%22%3A%22Cym5c%22%7D" id="Cym5c"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(".\n├── Dashboard\n│   ├── Analysis.js\n│   ├── Monitor.js\n│   └── Workplace.js\n...// 省略其他章节中的目录 \n")])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">三个文件中，我们分别添加简单的函数组件。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Analysis.js%5Cnexport%20default%20()%20%3D%3E%20%7B%5Cn%20%20%20return%20%3Ch1%3EAnalysis%20Page%3C%2Fh1%3E%5Cn%7D%22%2C%22id%22%3A%22hNJdD%22%7D" id="hNJdD"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// Analysis.js\nexport default () => {\n  return <h1>Analysis Page</h1>\n} \n")])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Monitor.js%5Cnexport%20default%20()%20%3D%3E%20%7B%5Cn%20%20return%20%3Ch1%3EMonitor%20Page%3C%2Fh1%3E%5Cn%7D%3B%22%2C%22id%22%3A%22x5B2l%22%7D" id="x5B2l"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// Monitor.js\nexport default () => {\n return <h1>Monitor Page</h1>\n}; \n")])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Workplace.js%5Cnexport%20default%20()%20%3D%3E%20%7B%5Cn%20%20return%20%3Ch1%3EWorkplace%20Page%3C%2Fh1%3E%5Cn%7D%3B%22%2C%22id%22%3A%22y5cfi%22%7D" id="y5cfi"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// Workplace.js\nexport default () => {\n return <h1>Workplace Page</h1>\n}; \n")])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h3",{attrs:{id:"第二步：配置应用路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二步：配置应用路由"}},[e._v("#")]),e._v(" 第二步：配置应用路由")]),e._v(" "),r("p",[e._v("<p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">在《初始化项目》一节中你已经用配置式路由添加了 <code>helloworld</code> 路由，这里在 config.js 中我们添加本章的三个路由:</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20routes%3A%20%5B%7B%5Cn%20%20%20%20path%3A%20'%2F'%2C%5Cn%20%20%20%20component%3A%20'..%2Flayout'%2C%5Cn%20%20%20%20routes%3A%20%5B%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20path%3A%20'%2F'%2C%5Cn%20%20%20%20%20%20%20%20component%3A%20'Helloworld'%2C%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20path%3A%20'%2Fhelloworld'%2C%5Cn%20%20%20%20%20%20%20%20component%3A%20'Helloworld'%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20path%3A%20'%2Fdashboard'%2C%5Cn%20%20%20%20%20%20%20%20routes%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20%7B%20path%3A%20'%2Fdashboard%2Fanalysis'%2C%20component%3A%20'Dashboard%2FAnalysis'%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%20path%3A%20'%2Fdashboard%2Fmonitor'%2C%20component%3A%20'Dashboard%2FMonitor'%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%20path%3A%20'%2Fdashboard%2Fworkplace'%2C%20component%3A%20'Dashboard%2FWorkplace'%20%7D%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5D%2C%5Cn%7D%3B%22%2C%22id%22%3A%22081Rh%22%7D\" id=\"081Rh\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">")]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("export default {\n routes: [{\n   path: '/',\n   component: '../layout',\n   routes: [\n     {\n       path: '/',\n       component: 'Helloworld',\n     },\n     {\n       path: '/helloworld',\n       component: 'Helloworld'\n     },\n     {\n       path: '/dashboard',\n       routes: [\n         { path: '/dashboard/analysis', component: 'Dashboard/Analysis' },\n         { path: '/dashboard/monitor', component: 'Dashboard/Monitor' },\n         { path: '/dashboard/workplace', component: 'Dashboard/Workplace' }\n       ]\n     },\n   ]\n }],\n}; \n")])])]),r("p",[e._v('</div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">这段配置的意思是指:</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><ul lake-indent="0" style="list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;"><li>访问 <code>/</code> 下面的路由的时，使用 <code>page</code> 文件夹下的 <code>../layout</code> 布局文件渲染页面，默认展示Helloworld组件</li></ul><ul lake-indent="0" style="list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;"><li>访问 <code>/dashboard/analysis</code> 时，使用 <code>page</code> 文件夹下的 <code>Dashboard/Analysis</code> 组件渲染到 layout 文件中 children 部分</li></ul><ul lake-indent="0" style="list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;"><li>访问 <code>/dashboard/monitor</code> 时，使用 <code>page</code> 文件夹下的 <code>Dashboard/Monitor</code> 组件渲染到 layout 文件中 children 部分</li></ul><ul lake-indent="0" style="list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;"><li>访问 <code>/dashboard/workplace</code> 时，使用 <code>page</code> 文件夹下的 <code>Dashboard/Workplace</code> 组件渲染到 layout 文件中 children 部分</li></ul><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h3",{attrs:{id:"第三步：配置侧边栏导航"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第三步：配置侧边栏导航"}},[e._v("#")]),e._v(" 第三步：配置侧边栏导航")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">万事俱备，只欠东风，路由已经和相应的页面组件关联起来了，现在我们只需要配置导航，使得能在点击导航时，触发 URL 刷新，路由根据配置返回和当前 URL 匹配的内容.</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">我们用 <code>Link</code> 组件（相当于<a>) 实现路由的跳转.</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><div data-card-type="block" data-lake-card="codeblock" data-card-value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20Link%20from%20\'umi%2Flink\'%3B%5Cn%5Cn%5Cn...%5Cn%5Cn%3CSider%20width%3D%7B256%7D%20style%3D%7B%7B%20minHeight%3A%20\'100vh\'%20%7D%7D%3E%5Cn%20%20%3Cdiv%20style%3D%7B%7B%20height%3A%20\'32px\'%2C%20background%3A%20\'rgba(255%2C255%2C255%2C.2)\'%2C%20margin%3A%20\'16px\'%7D%7D%2F%3E%5Cn%20%20%3CMenu%20theme%3D%5C%22dark%5C%22%20mode%3D%5C%22inline%5C%22%20defaultSelectedKeys%3D%7B%5B\'1\'%5D%7D%3E%5Cn%20%20%20%20%3CMenu.Item%20key%3D%5C%221%5C%22%3E%5Cn%20%20%20%20%20%20%3CLink%20to%3D%5C%22%2Fhelloworld%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3CIcon%20type%3D%5C%22pie-chart%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%3EHelloworld%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2FLink%3E%5Cn%20%20%20%20%3C%2FMenu.Item%3E%5Cn%20%20%20%20%3CSubMenu%5Cn%20%20%20%20%20%20key%3D%5C%22sub1%5C%22%5Cn%20%20%20%20%20%20title%3D%7B%3Cspan%3E%3CIcon%20type%3D%5C%22dashboard%5C%22%20%2F%3E%3Cspan%3EDashboard%3C%2Fspan%3E%3C%2Fspan%3E%7D%5Cn%20%20%20%20%3E%5Cn%20%20%20%20%20%20%20%20%3CMenu.Item%20key%3D%5C%222%5C%22%3E%3CLink%20to%3D%5C%22%2Fdashboard%2Fanalysis%5C%22%3E%E5%88%86%E6%9E%90%E9%A1%B5%3C%2FLink%3E%3C%2FMenu.Item%3E%5Cn%20%20%20%20%20%20%20%20%3CMenu.Item%20key%3D%5C%223%5C%22%3E%3CLink%20to%3D%5C%22%2Fdashboard%2Fmonitor%5C%22%3E%E7%9B%91%E6%8E%A7%E9%A1%B5%3C%2FLink%3E%3C%2FMenu.Item%3E%5Cn%20%20%20%20%20%20%20%20%3CMenu.Item%20key%3D%5C%224%5C%22%3E%3CLink%20to%3D%5C%22%2Fdashboard%2Fworkplace%5C%22%3E%E5%B7%A5%E4%BD%9C%E5%8F%B0%3C%2FLink%3E%3C%2FMenu.Item%3E%5Cn%20%20%20%20%3C%2FSubMenu%3E%5Cn%20%20%3C%2FMenu%3E%5Cn%3C%2FSider%3E%22%2C%22id%22%3A%22MpRbb%22%7D" id="MpRbb"><div class="lake-codeblock-content" style="border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);"><div class style="color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);">')]),e._v(" "),r("div",{staticClass:"language-undefined extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('import Link from \'umi/link\';\n\n\n...\n\n<sider width="{256}" style="{{" minheight: \'100vh\' }}>\n <div style="{{" height: \'32px\', background: \'rgba(255,255,255,.2)\', margin: \'16px\'}}>\n <menu theme="dark" mode="inline" defaultselectedkeys="{[\'1\']}">\n   <menu.item key="1">\n     <link to="/helloworld">\n       <icon type="pie-chart">\n       <span>Helloworld</span>\n     \n   </icon></menu.item>\n   <submenu key="sub1" title="{<span"><icon type="dashboard"><span>Dashboard</span>}\n   >\n       <menu.item key="2"><link to="/dashboard/analysis">分析页</menu.item>\n       <menu.item key="3"><link to="/dashboard/monitor">监控页</menu.item>\n       <menu.item key="4"><link to="/dashboard/workplace">工作台</menu.item>\n   </icon></submenu>\n </menu>\n\n')])])]),r("p",[e._v('</div></sider></div></div></div><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">页面效果如下:</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><span data-card-type="inline" data-lake-card="image" data-card-value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2018%2Fpng%2F85418%2F1537087681575-adae809a-6713-473f-b382-3f4596fe1a9b.png%22%2C%22alt%22%3A%22undefined%22%7D"><img data-role="image" src="https://cdn.nlark.com/yuque/0/2018/png/85418/1537087681575-adae809a-6713-473f-b382-3f4596fe1a9b.png" data-raw-src="https://cdn.nlark.com/yuque/0/2018/png/85418/1537087681575-adae809a-6713-473f-b382-3f4596fe1a9b.png" class="image lake-drag-image" style="border: none; box-shadow: none; visibility: visible;"></span></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p>')]),e._v(" "),r("h2",{attrs:{id:"结语"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),r("p",[e._v('<p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">至此我们的 demo 应用现在已经支持了最朴素的路由和布局了。实际项目中，我们会通过各种方式，优化整个布局和路由的实现过程（比如将导航菜单配置化，抽象出单独的侧边栏组件和顶部导航组件等），但最基本的原理与上面的简单应用是一样的。</p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;"><br></p><p style="font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;">那我们的侧边栏导航是不是至此就功能完备了呢？并没有，实际上还有很多的细节没有实现，比如当页面的url改变后导航要能够根据url路径的不同展开对应的导航菜单等，为了避免大家陷入到细节中，这里不做具体探讨，感兴趣的同学可以参考<a href="https://github.com/ant-design/ant-design-pro/" target="_blank" rel="noopener noreferrer">Ant Design Pro</a>的代码进行深入阅读。</p></div>')])])}),[],!1,null,null,null);o.default=a.exports}}]);